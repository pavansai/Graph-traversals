1. Clone Graph
  
  /*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    private HashMap<Node, Node> map = new HashMap<>();
    public Node cloneGraph(Node node){
        if(node == null){
            return node;
        }
        if(map.containsKey(node)){
            return map.get(node);
        }
        Node newNode = new Node(node.val, new ArrayList<>());
        map.put(node, newNode);

        for(Node n : node.neighbors){
            newNode.neighbors.add(cloneGraph(n));
        }
        return newNode;
    }
}

2. Number of Islands
  
class Solution {
    public int numIslands(char[][] grid){
        int islands = 0;
        for(int i=0; i<grid.length; i++){
            for(int j=0; j<grid[0].length; j++){
                if(grid[i][j] == '1') 
                islands++;
                dfs(grid, i, j);
                
            }
        }
        return islands;
    }
    public void dfs(char[][] grid, int i, int j){
        if(i<0 || j<0 || i>=grid.length || j>=grid[0].length || grid[i][j] == '0') return;
        grid[i][j] = '0';
        dfs(grid, i, j+1);
        dfs(grid, i+1, j);
        dfs(grid, i-1, j);
        dfs(grid, i, j-1);
    }
}

3. Course Schedule

  class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        Queue<Integer> q = new LinkedList<>();
        List<List<Integer>> adj = new ArrayList<>();
        int [] inDegree = new int[numCourses];
        for(int i=0; i<numCourses; i++){
            adj.add(new ArrayList<>());
        }
        for(int [] p : prerequisites){
            adj.get(p[1]).add(p[0]);
            inDegree[p[0]]++;
        }
        for(int i=0; i<numCourses; i++){
            if(inDegree[i] == 0){
                q.offer(i);
            }
        }
        int [] top = new int [numCourses];
        int i=0;
        while(!q.isEmpty()){
            int  node = q.peek();
            q.remove();
            top[i++] = node;
            for(int it: adj.get(node)){
                inDegree[it]--;
                if(inDegree[it] == 0){
                    q.add(it);
                }
            }
        }
        return i== numCourses;
    }
}

4. Pacific Atlantic Water Flow

  class Solution {
    public List<List<Integer>> pacificAtlantic(int[][] heights) {
        int r = heights.length;
        int c = heights[0].length;
        List<List<Integer>> list  = new ArrayList<>();
        boolean [][] p = new boolean [r][c];
        boolean [][] a = new boolean [r][c];
        for(int i=0; i<r; i++){
            dfs(i, 0, heights, p, -1);
            dfs(i, c-1, heights, a, -1);
        }
        for(int i=0; i<c; i++){
            dfs(0, i, heights, p, -1);
            dfs(r-1, i, heights, a, -1);
        }
        for(int i=0; i<r; i++){
            for(int j=0; j<c; j++){
                if(p[i][j] && a[i][j]){
                    list.add(Arrays.asList(i, j));
                }
            }
        }
        return list;

    }
    public void dfs(int i, int j, int [][] heights, boolean [][] ocean, int prev){
        
        if(i < 0 || i >= heights.length || j < 0 || j >= heights[0].length || ocean[i][j] || heights[i][j] < prev) return;

        ocean[i][j] = true;
        dfs(i+1, j, heights, ocean, heights[i][j]);
        dfs(i, j+1, heights, ocean, heights[i][j]);
        dfs(i, j-1, heights, ocean, heights[i][j]);
        dfs(i-1, j, heights, ocean, heights[i][j]);
    }
}
