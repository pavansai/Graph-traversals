Climbing stairs
class Solution {
    public int climbStairs(int n) {
        if(n == 1) return 1;
        int [] dp = new int[n+1];
        dp[1] = 1;
        dp[2] = 2;
        for(int i=3; i<=n; i++){
            dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[n];
    }
}

House Robber - 1

class Solution {
    public int rob(int[] nums){
        int n = nums.length;
        //int [] dp = new int [nums.length];
        // if( nums.length == 0){
        //     return 0;
        // }
        // if(nums.length == 1){
        //     return nums[0];
        // }
        // if(nums.length == 2){
        //     return Math.max(nums[0], nums[1]);
        // }
        int prev = nums[0];
        int prev2 = 0;
       for(int i=1; i<n; i++){
            int pick = nums[i];
            if(i > 1){
                pick = pick + prev2;
            }
            int not_pick = 0 + prev;
            int curr = Math.max(pick, not_pick);
            prev2=prev;
            prev=curr;
       }
       return prev;
    }
}


House robber - 2

class Solution {
    public int rob(int[] nums) {
        if(nums.length == 1){
            return nums[0];
        }
        int [] t = new int [nums.length];
        int [] t2 = new int [nums.length];
        for(int i=0; i<nums.length; i++){
            if(i != 0){
                t[i] = nums[i];
            }
            if(i != nums.length-1){
                t2[i] = nums[i];
            }
            //System.out.println(t[i]);
        }
        int a1 = rob1(t);
        System.out.print(a1);
        int a2 = rob1(t2);
        int ans = Math.max(a1, a2);
        return ans;
    }
    public int rob1(int[] nums){
        int n = nums.length;
        //int [] dp = new int [nums.length];
        if( nums.length == 0){
            return 0;
        }
        if(nums.length == 1){
            return nums[0];
        }
        if(nums.length == 2){
            return Math.max(nums[0], nums[1]);
        }
        int prev = nums[0];
        int prev2 = 0;
       for(int i=1; i<n; i++){
            int pick = nums[i];
            if(i > 1){
                pick = pick + prev2;
            }
            int not_pick = 0 + prev;
            int curr = Math.max(pick, not_pick);
            prev2=prev;
            prev=curr;
       }
       return prev;
    }
}

Best Time to Buy and Sell Stock

class Solution {
    public int maxProfit(int[] prices) {
        int c = prices[0];
        int ans = Integer.MIN_VALUE;
        for(int i=0; i<prices.length; i++){
            if(prices[i] < c){
                c=prices[i];
            }
            ans=Math.max(ans, prices[i] - c);
        }
        return ans;
    }
}

Best Time to Buy and Sell Stock II

class Solution {
    public int maxProfit(int[] prices){
        int [][] dp = new int [prices.length][2];
        for(int [] i : dp){
            Arrays.fill(i, -1);
        }
        return solve(0, 1, prices, dp);
    }
    public int solve(int i, int buy, int [] prices, int [][] dp){
        if(i == prices.length){
            return 0;
        }
        if(dp[i][buy] != -1){
            return dp[i][buy];
        }
        int ans=0;
        if(buy == 1){
            ans = Math.max(-prices[i] + solve(i+1, 0, prices, dp),
                            0+ solve(i+1, 1, prices, dp));
        }else{
            ans = Math.max(prices[i] + solve(i+1, 1, prices, dp), 
                            0+solve(i+1, 0, prices, dp));
        }
        return dp[i][buy]= ans;
    }
}

Best Time to Buy and Sell Stock III

class Solution {
    public int maxProfit(int[] prices) {
        int [][][] dp = new int [prices.length][2][3];
        for(int [][] d : dp){
            for(int [] i: d){
                Arrays.fill(i, -1);
            }
        }
        return solve(0, 1, prices, 2, dp);
    }
    public int solve(int i, int buy, int [] prices, int c, int [][][] dp){
        if(i == prices.length || c==0){
            return 0;
        }
        // if(c == 0){
        //     return 0;
        // }
        if(dp[i][buy][c] != -1){
            return dp[i][buy][c];
        }
        int ans = 0;
        if(buy == 1){
            ans = Math.max (-prices[i] + solve(i+1, 0, prices, c, dp), solve(i+1, 1, prices, c, dp));
        }else{
            ans = Math.max(prices[i] + solve(i+1, 1, prices, c-1, dp), solve(i+1, 0, prices, c, dp));
        }
        return dp[i][buy][c] = ans;
    }
}

Coin Change

class Solution {
    public int coinChange(int[] coins, int amount) {
        int [] dp = new int [amount + 1];
        Arrays.fill(dp, -1);
        int ans = solve(coins, amount, dp);
        return (ans == Integer.MAX_VALUE) ? -1 : ans;
    }
    public int solve(int [] coins, int amount, int [] dp){

        if(amount < 0){
            return Integer.MAX_VALUE;
        }

        if(amount == 0){
            return 0;
        }

        if(dp[amount] != -1){
            return dp[amount];
        }
        
        int min = Integer.MAX_VALUE;
        for(int c : coins){
            int ans = solve(coins, amount-c, dp);
            if(ans != Integer.MAX_VALUE){
                min = Math.min(min, 1+ans);
            }
        }
        return dp[amount] = min;
    }
}

Coin Change II

class Solution {
    public int change(int amount, int[] coins) {
        int[][] memo = new int[coins.length][amount + 1];
        for (int[] row : memo) {
            Arrays.fill(row, -1);
        }
        return changeHelper(amount, coins, 0, memo);
    }
    private int changeHelper(int amount, int[] coins, int index, int[][] memo) {
        if (amount == 0) {
            return 1;
        }
        if (index == coins.length) {
            return 0;
        }
        if (memo[index][amount] != -1) {
            return memo[index][amount];
        }
        int combinations = 0;
        combinations += changeHelper(amount, coins, index + 1, memo);
        if (amount >= coins[index]) {
            combinations += changeHelper(amount - coins[index], coins, index, memo);
        }
        memo[index][amount] = combinations;
        return combinations;
    }
}
Longest Palindromic Substring
class Solution {
    public String longestPalindrome(String s){
        int n = s.length();
        if(n == 0){
            return "";
        }

        boolean [][] dp = new boolean [n][n];
        for(int i=0; i<n; i++){
            dp[i][i] = true;
        }

        int start = 0;
        int max_length = 1;

        for(int i=0; i<n-1; i++){
            if(s.charAt(i) == s.charAt(i+1)){
                dp[i][i+1] = true;
                start=i;
                max_length = 2;
            }
        }
        for(int length = 3; length<=n; length++){
            for(int i=0; i<n - length+1; i++){
                int j = i + length-1;
                if(s.charAt(i) == s.charAt(j) && dp[i+1][j-1] == true){
                    dp[i][j] = true;
                    start = i;
                    max_length = length; 
                }
            }
        }
        return s.substring(start, max_length+start);
    }
}

Longest Palindromic Subsequence

class Solution {
    public int longestPalindromeSubseq(String s){
        int [][] dp = new int [s.length()][s.length()];
        return solve(s, dp, 0, s.length()-1);
    }
    public int solve(String s, int [][] dp, int i, int j){
        if(dp[i][j] != 0){
            return dp[i][j];
        }
        if(i>j){
            return 0;
        }
        if(i == j){
            return 1;
        }
        if(s.charAt(i) == s.charAt(j)){
            dp[i][j] = solve(s, dp, i+1, j-1)+2;
        }else{
            dp[i][j] = Math.max(solve(s, dp, i+1, j), solve(s, dp, i, j-1)); 
        }
        return dp[i][j];
    }
}

Longest Common Subsequence
class Solution {
    public int longestCommonSubsequence(String t1, String t2) {
        int m =  t1.length();
        int n =  t2.length();
        int [][] dp = new int [m+1][n+1];
        for(int i=1; i<=m; i++){
            for(int j=1; j<=n; j++){
                if(t1.charAt(i-1) == t2.charAt(j-1)){
                    dp[i][j] = 1+ dp[i-1][j-1]; 
                }else{
                    dp[i][j] = Math.max(dp[i][j-1], dp[i-1][j]);
                }
            }
        }
        String lcs = "";
        int i=m, j=n;
        while(i>0 && j>0){
            if(t1.charAt(i-1) == t2.charAt(j-1)){
                lcs = t1.charAt(i-1) + lcs;
                i--;
                j--;
            }else if(dp[i-1][j] > dp[i][j-1]){
                i--;
            }else{
                j--;
            }
        }
        System.out.print(lcs);
        return dp[m][n];
    }
}

3176. Find the Maximum Length of a Good Subsequence I

class Solution {
    public int maximumLength(int[] nums, int k){
        int n=nums.length;
        int [][][] dp = new int [n+1][n+1][k+1];
        for(int [][] d : dp){
            for(int [] dq : d){
                Arrays.fill(dq, -1);
            }
        }
        return solve(nums, dp, 0, -1, k);
    }
    private int solve(int [] nums, int [][][] dp, int i, int prev, int k){
        if(i >= nums.length || k<0){
            return 0;
        }
        if(dp[i][prev+1][k] != -1){
            return dp[i][prev+1][k];
        }
        int ans = Integer.MIN_VALUE;
        if(prev == -1 || nums[i] == nums[prev]){
            ans = Math.max(ans, 1+solve(nums, dp, i+1, i, k));
        }
        if(prev !=-1 && nums[i] !=nums[prev] && k>0){
            ans = Math.max(ans, 1+solve(nums, dp, i+1, i, k-1));
        }
        ans = Math.max(ans, solve(nums, dp, i+1, prev, k));
        return dp[i][prev+1][k] = ans;
    }
}
376. Wiggle Subsequence
class Solution {
    public int wiggleMaxLength(int[] nums) {
        int n = nums.length;
        if(n == 1) return 1;
        int [][] dp = new int [n][2];
        for(int  [] d: dp){
            Arrays.fill(d, -1);
        }
        return Math.max(solve(nums, dp, n-1, false), solve(nums, dp, n-1, true));
    }
    public int solve(int [] nums, int [][] dp, int i, boolean flag){
        if(i == 0){
            return 1;
        }
        if(flag ){
            if(dp[i][1] != -1){
                return dp[i][1];
            }
        }
        else {
            if(dp[i][0] !=-1){
                return dp[i][0];
            }
        }
        int ans = 1;
        if(flag){
            if( i-1 >=0 && nums[i] < nums[i-1]){
                ans = Math.max(ans, 1+solve(nums, dp, i-1, false));
            }else{
                ans = Math.max(ans, solve(nums, dp, i-1, true));
            }
        }else{
            if(i-1 >= 0 && nums[i] > nums[i-1]){
                ans = Math.max(ans, 1+solve(nums, dp, i-1, true));
            }else{
                ans = Math.max(ans, solve(nums, dp, i-1, false));
            }
        }
        if(flag){
            return dp[i][1] = ans;
        }
        return dp[i][0] =ans;
    }
}

740. Delete and Earn

class Solution {
    public int deleteAndEarn(int[] nums) {
        int n = nums.length;
        int maxNum = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : nums) {
            map.put(i, map.getOrDefault(i, 0) + 1);
            maxNum = Math.max(maxNum, i);
        }
        int[] dp = new int[maxNum + 1];
        Arrays.fill(dp, -1);
        return solve(map, dp, maxNum);
    }

    public int solve(Map<Integer, Integer> map, int[] dp, int num) {
        if (num == 0) {
            return 0;
        }
        if (dp[num] != -1) {
            return dp[num];
        }
        int pick = num * map.getOrDefault(num, 0);
        if (num > 1) {
            pick += solve(map, dp, num - 2);
        }
        int notPick = solve(map, dp, num - 1);
        return dp[num] = Math.max(pick, notPick);
    }
}

91. Decode Ways

class Solution {
    public int numDecodings(String s) {
        int [] dp = new int [s.length()+1];
        Arrays.fill(dp, -1);
        if(s.length() == 0){
            return 0;
        }
        return solve(s, dp, s.length());
    }
    public int solve(String s, int [] dp, int i){
        if (i == 0) {
            return s.charAt(i) == '0' ? 0 : 1;
        }
        if(dp[i] != -1){
            return dp[i];
        }
        int ans = solve(s, dp, i-1);
        if (i > 1 && (s.charAt(i - 1) == '1' || (s.charAt(i - 1) == '2' && s.charAt(i) < '7'))) {
            ans += solve(s, dp, i - 2);
        }
        return dp[i] = ans;
    }
}
639. Decode Ways II

class Solution {
    private static final int MOD = 1000000007;
    
    public int numDecodings(String s) {
        int n = s.length();
        Long[] memo = new Long[n];
        return (int) decodeHelper(s, 0, memo);
    }
    
    private long decodeHelper(String s, int index, Long[] memo) {
        // Base case: reached the end of the string, valid decoding
        if (index == s.length()) {
            return 1;
        }
        
        // Invalid case: current character is '0', cannot be decoded
        if (s.charAt(index) == '0') {
            return 0;
        }
        
        // If the result for the current index is already memoized, return it
        if (memo[index] != null) {
            return memo[index];
        }
        
        long count = 0;
        
        if (s.charAt(index) == '*') {
            // Current character is '*', it can represent any digit from '1' to '9'
            // Recursively call decodeHelper for the next index and multiply the result by 9
            count = (count + 9 * decodeHelper(s, index + 1, memo)) % MOD;
            
            if (index + 1 < s.length()) {
                if (s.charAt(index + 1) == '*') {
                    // Next character is also '*', we have 15 additional ways to decode (11-19, 21-26)
                    count = (count + 15 * decodeHelper(s, index + 2, memo)) % MOD;
                } else if (s.charAt(index + 1) >= '0' && s.charAt(index + 1) <= '6') {
                    // Next character is between '0' and '6', we have 2 additional ways to decode (1x, 2x)
                    count = (count + 2 * decodeHelper(s, index + 2, memo)) % MOD;
                } else {
                    // Next character is greater than '6', we have 1 additional way to decode (1x)
                    count = (count + decodeHelper(s, index + 2, memo)) % MOD;
                }
            }
        } else {
            // Current character is a digit, recursively call decodeHelper for the next index
            count = (count + decodeHelper(s, index + 1, memo)) % MOD;
            
            if (index + 1 < s.length()) {
                if (s.charAt(index) == '1' && s.charAt(index + 1) == '*') {
                    // Current character is '1' and next character is '*', we have 9 additional ways to decode (11-19)
                    count = (count + 9 * decodeHelper(s, index + 2, memo)) % MOD;
                } else if (s.charAt(index) == '2' && s.charAt(index + 1) == '*') {
                    // Current character is '2' and next character is '*', we have 6 additional ways to decode (21-26)
                    count = (count + 6 * decodeHelper(s, index + 2, memo)) % MOD;
                } else if (s.charAt(index) == '1' || 
                           (s.charAt(index) == '2' && s.charAt(index + 1) >= '0' && s.charAt(index + 1) <= '6')) {
                    // Current character is '1' or (current character is '2' and next character is between '0' and '6'),
                    // we have 1 additional way to decode (1x or 2x)
                    count = (count + decodeHelper(s, index + 2, memo)) % MOD;
                }
            }
        }
        
        // Memoize the result for the current index
        memo[index] = count;
        
        return count;
    }
}

1043. Partition Array for Maximum Sum
class Solution {
    public int maxSumAfterPartitioning(int[] arr, int k) {
        int [] dp = new int [arr.length+1];
        Arrays.fill(dp, -1);
        return solve(arr, 0, k, dp);
    }
    public int solve(int  [] arr, int i, int k, int [] dp){
        if(i == arr.length){
            return 0;
        }
        if(dp[i] !=-1){
            return dp[i];
        }
        int sum = 0;
        int maxElement = Integer.MIN_VALUE;
        int ans=0;
        int len=0;
        for(int j=i; j<Math.min(arr.length, i+k); j++){
            len++;
            maxElement = Math.max(maxElement, arr[j]);
            sum = (len*maxElement) + solve(arr, j+1, k, dp);
            ans=Math.max(ans, sum);
        }
        return dp[i] = ans;
    }
}

1235. Maximum Profit in Job Scheduling
class Solution {
    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
        int n = startTime.length;
        int [][] jobs = new int [n][3];
        for(int i=0; i<n; i++){
            jobs[i] = new int []{startTime[i], endTime[i], profit[i]};
        }
        Arrays.sort(jobs, (a, b) -> a[0]-b[0]);
        int [] dp = new int [n+1];
        Arrays.fill(dp, -1);
        return solve( jobs, 0, dp);
    }
    public int solve(int [][] jobs, int i, int [] dp){
        if(i >= jobs.length){
            return 0;
        }
        if(dp[i]!=-1){
            return dp[i];
        }
        int pick = jobs[i][2];
        int next_available_time = getTime(jobs, jobs[i], i);
        if(next_available_time != -1){
            pick +=   solve(jobs, next_available_time, dp);
        }
        int not_pick = solve(jobs, i+1, dp);
        return dp[i] = Math.max(pick, not_pick);
    }
    public int getTime(int[][] jobs, int [] job, int i){
        int left=i, right=jobs.length-1;
        int pos = -1;
        while(left <= right){
            int mid = left+(right-left) / 2;
            int start = jobs[mid][0];
            int end = job[1];
            if(start>=end){
                pos = mid;
                right = mid-1;
            }else{
                left=mid+1;
            }
        }
        return pos;
    }
}
