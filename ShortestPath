743. Network Delay Time

class Solution {
    public int networkDelayTime(int[][] times, int n, int k) {
        List<List<int[]>> adj = new ArrayList<>();
        for(int i=0; i<=n; i++){
            adj.add(new ArrayList<>());
        }
        for(int [] t : times){
            int u = t[0];
            int v = t[1];
            int w = t[2];
            adj.get(u).add(new int[]{v, w});
        }
        int [] dist = new int[n+1];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[k]  = 0;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[1]-b[1]);
        pq.add(new int[]{k, 0});
        while(!pq.isEmpty()){
            int [] curr = pq.poll();
            int currNode = curr[0];
            int currDist = curr[1];

            for(int [] edge: adj.get(currNode)){
                int adjNode = edge[0];
                int adjDist = edge[1] + currDist;

                if(adjDist < dist[adjNode]){
                    dist[adjNode] = adjDist;
                    pq.offer(new int []{adjNode, adjDist});
                }
            }
        }
        int maxDist = 0;
        for(int i=1; i<=n; i++){
            if(dist[i] == Integer.MAX_VALUE){
                return -1;
            }
            maxDist = Math.max(maxDist, dist[i]);
        }
        return maxDist;
    }
}

787. Cheapest Flights Within K Stops

class Solution {
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        List<List<int[]>> adj = new ArrayList<>();
        for(int i=0; i<n; i++){
            adj.add(new ArrayList<>());
        }
        for(int f []: flights){
            int u=f[0];
            int v=f[1];
            int w=f[2];
            adj.get(u).add(new int[]{v, w});
        }
        int [] distn = new int [n];
        Arrays.fill(distn, Integer.MAX_VALUE);
        Queue<int[]> q = new LinkedList<>();
        q.offer(new int[]{src, 0});
        int stops = 0;
        while( stops<=k && !q.isEmpty()){
            int size = q.size();
                while(size-->0){
                    int [] curr = q.poll();
                    int node = curr[0];
                    int dist = curr[1];
                    for(int [] edge : adj.get(node)){
                    int neighbor = edge[0];
                    int p = edge[1];
                    if(p + dist >= distn[neighbor])
                        continue;
                    distn[neighbor] = p+dist;
                    q.offer(new int[]{neighbor, distn[neighbor]});
                    }
                }
                stops++;
        }
        return distn[dst] == Integer.MAX_VALUE ? -1: distn[dst];
    }
}


882. Reachable Nodes In Subdivided Graph

class Solution {
    public int reachableNodes(int[][] edges, int maxMoves, int n) {
       int[][] graph = new int[n][n];
        for ( int[] t: graph ) {
            Arrays.fill(t, -1);
        }
        for ( int[] t: edges ) {
            graph[t[0]][t[1]] = t[2];
            graph[t[1]][t[0]] = t[2];
        }
        PriorityQueue<int[]> heap = new PriorityQueue<>( (a, b) -> b[1]-a[1] );
        int ans = 0;
        boolean[] vis = new boolean[n];
        heap.offer(new int[]{0, maxMoves});
        while ( !heap.isEmpty() ) {
            int[] info = heap.poll();
            int adjNode = info[0];
            int remMoves = info[1];
            if ( vis[adjNode] ) {
                continue;
            }
		    vis[adjNode] = true;
			
            ans++;
            for ( int i=0; i<n; i++ ) {
                if ( graph[adjNode][i]!=-1 ) {
                    if ( !vis[i] && remMoves >=graph[adjNode][i]+1 ) {
                        heap.offer( new int[] {i, remMoves-graph[adjNode][i]-1} );
                    }
                    int movesTaken = Math.min(remMoves, graph[adjNode][i]);
                    graph[adjNode][i] -= movesTaken;
                    graph[i][adjNode] -= movesTaken;
                    ans += movesTaken;
                }
            }
        }
        return ans;
    }
}
1368. Minimum Cost to Make at Least One Valid Path in a Grid

class Solution {
    int dx[] = {0,0,1,-1};
    int dy[] = {1,-1,0,0};
    int [][] DIR  = {{0,1},{0,-1},{1,0},{-1,0}};
    public int minCost(int[][] grid){
        PriorityQueue<int []> pq = new PriorityQueue<>((a, b) -> a[0]-b[0]);
        pq.offer(new int [] {0, 0, 0});

        int[][] dist = new int[grid.length][grid[0].length];
        for(int [] d : dist){
            Arrays.fill(d, Integer.MAX_VALUE);
        }
        dist[0][0] = 0;
        while(!pq.isEmpty()){
            int [] res = pq.poll();

            if(res[1] == grid.length-1 && res[2] == grid[0].length-1){
                return res[0];
            }
            int i=0;
            for(int [] d: DIR){
                int x = res[1] + d[0];
                int y = res[2] + d[1];

            if(x < 0 || y < 0 || x >= grid.length || y >= grid[0].length){
                i++;
                continue;
            } 

            int cost = res[0] + (grid[res[1]][res[2]] == i+1 ? 0 : 1);

                if(cost < dist[x][y]){
                    dist[x][y]=cost;
                    pq.add(new int[]{cost,x, y});
                }
                i++;
            }
        }
        return -1;
    }
}

1976. Number of Ways to Arrive at Destination

class Pair{
    long first;
    long second;
    Pair(long first,long second){
        this.first=first;
        this.second=second;
    }
}
class Solution {
    public int countPaths(int n, int[][] roads) {
        long mod=1000000007;
        long[] dist=new long[n];
        long[] way=new long[n];
        for(int i=0;i<n;i++){
            dist[i]=Long.MAX_VALUE;
        }
        for(int i=0;i<n;i++){
            way[i]=0;
        }
        way[0]=1;
        dist[0]=0;
        PriorityQueue<Pair> q=new PriorityQueue<>((a,b)->Long.compare(a.first, b.first));
        q.add(new Pair(0,0));
        List<List<Pair>> adj=new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<Pair>());
        }
        for(int [] r : roads){
            adj.get(r[0]).add(r[1]);
            adj.get(r[1]).add(r[0]);
        }
        while(!q.isEmpty()){
            long d=q.peek().first;
            long node=q.peek().second;
            q.poll();
            for(Pair p:adj.get((int)node)){
                if(d+p.second < dist[(int)p.first]){
                    dist[(int)p.first]=d+p.second;
                    way[(int)p.first]=way[(int)node];
                    q.add(new Pair(d+p.second,p.first));
                }
                else if(d+p.second == dist[(int)p.first]){
                    way[(int)p.first]= (way[(int)p.first] + way[(int)node])%mod;
                }
            }
        }
        return (int)(way[n-1]%mod);
        
    }
}

2290. Minimum Obstacle Removal to Reach Corner
class Solution {
    int[][] DIR = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};

    public int minimumObstacles(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[][] dist = new int[m][n];
        for (int[] d : dist) {
            Arrays.fill(d, Integer.MAX_VALUE);
        }
        dist[0][0] = 0;

        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[2] - b[2]);
        pq.offer(new int[]{0, 0, 0});

        while (!pq.isEmpty()) {
            int[] cell = pq.poll();
            int x = cell[0], y = cell[1], cost = cell[2];

            if (x == m - 1 && y == n - 1) {
                return cost;
            }

            for (int[] dir : DIR) {
                int newX = x + dir[0];
                int newY = y + dir[1];

                if (newX < 0 || newY < 0 || newX >= m || newY >= n) {
                    continue;
                }

                int newCost = cost + grid[newX][newY];

                if (newCost < dist[newX][newY]) {
                    dist[newX][newY] = newCost;
                    pq.offer(new int[]{newX, newY, newCost});
                }
            }
        }

        return -1; // No path found
    }
}


