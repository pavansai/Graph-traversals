129. Sum Root to Leaf Numbers
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int sumNumbers(TreeNode root) {
        return solve(root, 0);
    }
    
    public int solve(TreeNode root, int sum) {
        if (root == null)
            return 0;
        
        sum = sum * 10 + root.val;
        
        if (root.left == null && root.right == null)
            return sum;
        
        return solve(root.left, sum) + solve(root.right, sum);
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
654. Maximum Binary Tree
class Solution {
    public TreeNode constructMaximumBinaryTree(int[] nums) {
        return solve(nums, 0, nums.length);
    }
    public TreeNode solve(int [] nums, int l, int r){
        if(l == r){
            return null;
        }
        int max = max(nums, l, r);
        TreeNode node = new TreeNode(nums[max]);
        node.left = solve(nums, l, max);
        node.right = solve(nums, max+1, r);
        return node;
    }
    public int max(int [] nums, int l, int r){
        int max = l;
        for(int i=l; i<r; i++){
            if(nums[max] < nums[i]){
                max=i;
            }
        }
        return max;
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
662. Maximum Width of Binary Tree
class Solution {
    class Pair{
        TreeNode node;
        int index;
        Pair(TreeNode node, int index){
            this.node = node;
            this.index = index;
        }
    }
    public int widthOfBinaryTree(TreeNode root){
        Queue<Pair> q = new LinkedList();
        q.add(new Pair(root, 0));
        int max=0;
        while(!q.isEmpty()){
            int size = q.size();
            int s=0;
            int e=0;
            for(int i=0; i<size; i++){
                Pair p = q.remove();
                int idx = p.index;
                if(i == 0) s = idx;
                if(i == size-1) e = idx;
                if(p.node.left != null){
                    q.offer(new Pair(p.node.left, 2*p.index));
                }
                if(p.node.right != null){
                    q.offer(new Pair(p.node.right, 2*p.index+1));
                }
            }
            max=Math.max(max, e-s+1);
        }
        return max;
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
543. Diameter of Binary Tree
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
   int d=0;
    public int diameterOfBinaryTree(TreeNode root) {
        solve(root);
        return d;
    }
    public int solve(TreeNode root){

        if(root == null) return 0;
        int left = solve(root.left);
        int right = solve(root.right);
        d=Math.max(d, left+right);
        return 1+Math.max(left, right);
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
297. Serialize and Deserialize Binary Tree
public class Codec {
    public String serialize(TreeNode root) {
        if (root == null) return "";
        Queue<TreeNode> q = new LinkedList<>();
        StringBuilder res = new StringBuilder();
        q.add(root);
        while (!q.isEmpty()) {
            TreeNode node = q.poll();
            if (node == null) {
                res.append("n ");
                continue;
            }
            res.append(node.val + " ");
            q.add(node.left);
            q.add(node.right);
        }
        return res.toString();
    }

    public TreeNode deserialize(String data) {
        if (data == "") return null;
        Queue<TreeNode> q = new LinkedList<>();
        String[] values = data.split(" ");
        TreeNode root = new TreeNode(Integer.parseInt(values[0]));
        q.add(root);
        for (int i = 1; i < values.length; i++) {
            TreeNode parent = q.poll();
            if (!values[i].equals("n")) {
                TreeNode left = new TreeNode(Integer.parseInt(values[i]));
                parent.left = left;
                q.add(left);
            }
            if (!values[++i].equals("n")) {
                TreeNode right = new TreeNode(Integer.parseInt(values[i]));
                parent.right = right;
                q.add(right);
            }
        }
        return root;
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
437. Path Sum III
class Solution {
    public int pathSum(TreeNode root, int targetSum) {
        Map<Long, Integer> map = new HashMap<>();
        map.put(0L, 1);
        return solve(root, map, targetSum, 0L);
    }
    public int solve(TreeNode root, Map<Long, Integer> map, int targetSum, long sum){
        if(root == null) return 0;
        sum+=root.val;
         
        int count = map.getOrDefault(sum-targetSum, 0);

        map.put(sum, map.getOrDefault(sum, 0) + 1);
        count+=solve(root.left, map, targetSum, sum);
        count+=solve(root.right, map, targetSum, sum);
        map.put(sum, map.get(sum) - 1);
        return count;
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
572. Subtree of Another Tree
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSubtree(TreeNode root, TreeNode subRoot) {
        if(root == null) return false;
      
             if(solve(root, subRoot)) return true;      
 
             return isSubtree(root.left, subRoot) || isSubtree(root.right, subRoot);
      }
     public boolean solve(TreeNode root, TreeNode subRoot){
            if(root == null && subRoot == null) return true;

            if(root == null || subRoot == null) return false;
            
            if(root.val != subRoot.val) return false;

            return solve(root.left, subRoot.left) && solve(root.right, subRoot.right);
     }

}


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
208. Implement Trie (Prefix Tree)
class Trie {
    TrieNode root;
    public Trie() {
        root = new TrieNode();
    }
    public void insert(String word) {
        TrieNode node = root;
        for(char c : word.toCharArray()){
            if(node.children[c - 'a'] == null){
                node.children[c - 'a'] = new TrieNode();
            }
            node = node.children[c - 'a'];
        }
        node.endOfWord = true;
    }
    public boolean search(String word) {
        TrieNode node = root;
        for(char c : word.toCharArray()){
            if(node.children[c - 'a'] == null) return false;
            node = node.children[c - 'a'];
        }
        return node.endOfWord;
    }
    public boolean startsWith(String prefix){
        TrieNode node = root;
        for(char c: prefix.toCharArray()){
            if(node.children[c - 'a'] == null) return false;
            node = node.children[c- 'a'];
        }
        return true;
    }
}
class TrieNode {
    TrieNode [] children;
    boolean endOfWord;
    TrieNode(){
        this.children = new TrieNode[26];
        endOfWord = false;
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
212. Word Search II
class Solution {
    public List<String> findWords(char[][] board, String[] words){
        List<String> list = new ArrayList<>();
        TrieNode root = buildTrie(words);
        for(int i=0; i<board.length; i++){
            for(int j=0; j<board[0].length; j++){
                dfs(i, j, board, root, list);
            }
        }
        return list;
    }
    public void dfs(int i, int j, char[][] board, TrieNode p, List<String> list){
        char c = board[i][j];
        if(c == '#' || p.children[c - 'a'] == null) return;
        p = p.children[c - 'a'];
        if(p.word!=null){
            list.add(p.word);
            p.word=null;
        } 
        board[i][j] = '#';
        if (i > 0) dfs(i - 1, j, board, p, list); 
        if (j > 0) dfs(i, j - 1, board, p, list);
        if (i < board.length - 1) dfs(i + 1, j, board, p, list); 
        if (j < board[0].length - 1) dfs(i, j + 1, board,  p, list); 
        board[i][j] = c;
    }
    public TrieNode buildTrie(String [] words){
        TrieNode root = new TrieNode();
        for(String s : words){
            TrieNode p = root;
            for(char c : s.toCharArray()){
                if(p.children[c -'a'] == null){
                    p.children[c- 'a'] = new TrieNode();
                }
                p=p.children[c - 'a'];
            }
            p.word=s;
        }
        return root;
    }
}
class TrieNode{
    TrieNode [] children = new TrieNode[26];
    String word;
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
98. Validate Binary Search Tree
class Solution {
    public boolean isValidBST(TreeNode root) {
        return isValidBST(root, Long.MIN_VALUE, Long.MAX_VALUE);
    }
    
    public boolean isValidBST(TreeNode root, long minVal, long maxVal) {
        if (root == null) return true;
        if (root.val >= maxVal || root.val <= minVal) return false;
        return isValidBST(root.left, minVal, root.val) && isValidBST(root.right, root.val, maxVal);
    }
}


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
226. Invert Binary Tree
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode invertTree(TreeNode root){
        if(root == null) return root;

        TreeNode left = invertTree(root.left);
        TreeNode right = invertTree(root.right);

        root.left = right;
        root.right = left;

        return root;
    }
}


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
100. Same Tree
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p == null && q == null) return true;

        if(p == null || q == null ) return false;

        if(p.val != q.val) return false;

        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
230. Kth Smallest Element in a BST
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        if(root == null) return 0;
        List<Integer> list = new ArrayList<>();
        solve(root, list);
        return list.get(k-1);
    }
    public List<Integer> solve(TreeNode root, List<Integer> list){
        if(root == null) return list;
        solve(root.left, list);
        list.add(root.val);
        solve(root.right, list);
        return list;
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
104. Maximum Depth of Binary Tree
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {
        int d = 1;
        if(root == null) return 0;

        if(root.left != null)
        d=Math.max(d, 1 + maxDepth(root.left));

        if(root.right !=null)
        d=Math.max(d, 1 + maxDepth(root.right));

        return d;
    }
}



----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
105. Construct Binary Tree from Preorder and Inorder Traversal
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i=0; i<inorder.length; i++){
            map.put(inorder[i], i);
        }
        TreeNode root = solve(inorder, 0, inorder.length-1, preorder, 0, preorder.length-1, map);
        return root;
    }
    public TreeNode solve(int [] inorder, int iStart, int iEnd, int[] preorder, int pStart, int pEnd, HashMap<Integer, Integer> map){
        if(pStart > pEnd || iStart > iEnd){
            return null;
        }
        TreeNode root = new TreeNode(preorder[pStart]);
        int inRoot = map.get(root.val);
        int nodesLeft = inRoot - iStart;
        root.left = solve(inorder, iStart, inRoot-1, preorder, pStart+1, pStart+nodesLeft, map);
        root.right = solve(inorder, inRoot+1, iEnd, preorder, pStart+ nodesLeft+1, pEnd, map);
        return root;
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
617. Merge Two Binary Trees
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode mergeTrees(TreeNode r1, TreeNode r2){
        if(r1 == null) return r2;
        if(r2 == null) return r1;
        r1.val+=r2.val;
        r1.left = mergeTrees(r1.left, r2.left);
        r1.right = mergeTrees(r1.right, r2.right);
        return r1;
    }
}



----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
235. Lowest Common Ancestor of a Binary Search Tree
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
         if(root == null || root == p || root == q) return root;

        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);

        if(left == null && right ==null){
            return null;
        }
        if(left ==null && right!=null){
            return right;
        }
        if(left !=null && right == null){
            return left;
        }else{
            return root;
        }
    }
}



----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
236. Lowest Common Ancestor of a Binary Tree
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null || root == p || root == q) return root;

        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);

        if(left == null && right ==null){
            return null;
        }
        if(left ==null && right!=null){
            return right;
        }
        if(left !=null && right == null){
            return left;
        }else{
            return root;
        }
    }
}



----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
112. Path Sum
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if(root == null) return false;
        int sum = 0;
        sum+=root.val;
        if(root.left == null && root.right == null && sum == targetSum){
            return true;
        }
        return hasPathSum(root.left, targetSum-sum) || hasPathSum(root.right, targetSum-sum);
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
113. Path Sum II
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> res = new ArrayList<>();
        if(root == null) return res;
        solve(root, targetSum, new ArrayList<>(), res);
        return res;
    }
    public void solve(TreeNode root, int targetSum, List<Integer> list, List<List<Integer>> res){
        if(root == null) return;
        int sum=0;
        sum+=root.val;
        list.add(root.val);
        if(sum == targetSum && root.left == null && root.right == null){
            res.add(new ArrayList<>(list));
        }
        solve(root.left, targetSum-root.val, list, res);
        solve(root.right, targetSum-root.val, list, res);
        list.remove(list.size()-1);
    }
 }
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
124. Binary Tree Maximum Path Sum
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution{
    int maxSum;
    public int maxPathSum(TreeNode root) {
        maxSum = Integer.MIN_VALUE;
        solve(root);
        return maxSum;
    }
    public int solve(TreeNode root){
        if(root == null) return 0;
        int leftSum = Math.max(solve(root.left), 0);
        int rightSum = Math.max(solve(root.right), 0);

        maxSum = Math.max(maxSum, root.val+leftSum+rightSum);

        return root.val+Math.max(leftSum, rightSum);
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


























